#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ API.
"""

import asyncio
import json
import aiohttp

USERNAME = "204027528"
PASSWORD = "qwsxza"
API_BASE_URL = "https://svet.kaluga.ru/test7/service"

async def check_consumption_history():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º consumption_history."""
    
    async with aiohttp.ClientSession() as session:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        auth_url = f"{API_BASE_URL}/auth/sign-in"
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Origin': 'https://svet.kaluga.ru',
            'Referer': 'https://svet.kaluga.ru/',
            'Content-Type': 'application/json',
        }
        
        auth_data = {"account": USERNAME, "password": PASSWORD}
        
        async with session.post(auth_url, json=auth_data, headers=headers) as response:
            auth_result = await response.json()
            token = auth_result.get('token')
            
            if not token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
                return
            
            headers['Authorization'] = f'Bearer {token}'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
            accounts_url = f"{API_BASE_URL}/api/profile/accounts/"
            async with session.get(accounts_url, headers=headers) as resp:
                accounts = await resp.json()
                if isinstance(accounts, dict):
                    accounts = [accounts]
            
            print("üîç –ü–†–û–í–ï–†–ö–ê HISTORY ENDPOINTS:")
            print("=" * 60)
            
            for account in accounts[:1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç
                account_id = account.get("number")
                print(f"\nüè† –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç {account_id}:")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º consumption_history
                try:
                    consumption_url = f"{API_BASE_URL}/history/consumptions/{account_id}"
                    async with session.get(consumption_url, headers=headers) as resp:
                        if resp.status == 200:
                            consumption_history = await resp.json()
                            print(f"üìä consumption_history: {json.dumps(consumption_history, indent=2, ensure_ascii=False)}")
                        else:
                            print(f"‚ùå consumption_history: HTTP {resp.status}")
                except Exception as e:
                    print(f"‚ùå consumption_history: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º payment_history  
                try:
                    payment_url = f"{API_BASE_URL}/history/payments/{account_id}"
                    async with session.get(payment_url, headers=headers) as resp:
                        if resp.status == 200:
                            payment_history = await resp.json()
                            print(f"üí≥ payment_history: {json.dumps(payment_history, indent=2, ensure_ascii=False)}")
                        else:
                            print(f"‚ùå payment_history: HTTP {resp.status}")
                except Exception as e:
                    print(f"‚ùå payment_history: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º meter_history
                try:
                    meter_url = f"{API_BASE_URL}/history/meters/{account_id}"
                    async with session.get(meter_url, headers=headers) as resp:
                        if resp.status == 200:
                            meter_history = await resp.json()
                            print(f"‚ö° meter_history: {json.dumps(meter_history, indent=2, ensure_ascii=False)}")
                        else:
                            print(f"‚ùå meter_history: HTTP {resp.status}")
                except Exception as e:
                    print(f"‚ùå meter_history: {e}")
            
            print("\n" + "=" * 60)
            print("–í–´–í–û–î–´:")
            print("–ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ history endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–∫–∏,")
            print("—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–Ω—Å–æ—Ä—ã –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")

if __name__ == "__main__":
    asyncio.run(check_consumption_history())
