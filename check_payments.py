#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API payment_details - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–º –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏
"""

import asyncio
import aiohttp
import json
import pprint

API_BASE_URL = "https://lk-api.ksk-kaluga.ru:8443/api/v1"
API_AUTH_URL = f"{API_BASE_URL}/auth/login"
API_ACCOUNTS_URL = f"{API_BASE_URL}/accounts"
API_PAYMENT_DETAILS_URL = f"{API_BASE_URL}/payment-details"

LOGIN = "204027528"
PASSWORD = "qwsxza"

async def test_payment_details():
    async with aiohttp.ClientSession() as session:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        auth_data = {
            "login": LOGIN,
            "password": PASSWORD
        }
        
        async with session.post(API_AUTH_URL, json=auth_data) as response:
            if response.status != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                return
            
            auth_result = await response.json()
            token = auth_result.get("data", {}).get("token")
            if not token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
                return
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        
        headers = {"Authorization": f"Bearer {token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞
        print("\nüìã –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞...")
        async with session.get(API_ACCOUNTS_URL, headers=headers) as response:
            if response.status != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {response.status}")
                return
                
            accounts_result = await response.json()
            accounts = accounts_result.get("data", [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts)}")
            
            for account in accounts:
                print(f"  üìä –°—á–µ—Ç: {account.get('number')} - {account.get('address')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payment_details –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
        for account in accounts:
            account_id = account.get("number")
            if not account_id:
                continue
                
            print(f"\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º payment_details –¥–ª—è —Å—á–µ—Ç–∞ {account_id}...")
            
            params = {"accountId": account_id}
            async with session.get(API_PAYMENT_DETAILS_URL, headers=headers, params=params) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è payment_details: {response.status}")
                    continue
                
                payment_result = await response.json()
                payment_data = payment_result.get("data", {})
                
                print(f"\nüìä –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï payment_details –¥–ª—è —Å—á–µ—Ç–∞ {account_id}:")
                print("="*60)
                pprint.pprint(payment_data, width=120, depth=5)
                print("="*60)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã payment_details:")
                if isinstance(payment_data, dict):
                    for key, value in payment_data.items():
                        print(f"  üè∑Ô∏è  {key}: {type(value).__name__}")
                        if isinstance(value, (list, dict)) and value:
                            if isinstance(value, list) and len(value) > 0:
                                print(f"    üìù –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(value[0]).__name__}")
                                if isinstance(value[0], dict):
                                    print(f"    üîë –ö–ª—é—á–∏: {list(value[0].keys())}")
                            elif isinstance(value, dict):
                                print(f"    üîë –ö–ª—é—á–∏: {list(value.keys())}")
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
                print(f"\nüéØ –ü–û–ò–°–ö –ü–†–ò–ù–Ø–¢–´–• –ü–õ–ê–¢–ï–ñ–ï–ô:")
                
                def find_payments(data, path=""):
                    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
                    if isinstance(data, dict):
                        for key, value in data.items():
                            current_path = f"{path}.{key}" if path else key
                            
                            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
                            payment_keywords = ['payment', '–ø–ª–∞—Ç–µ–∂', '–ø—Ä–∏–Ω—è—Ç', 'accepted', 
                                              'paid', '–æ–ø–ª–∞—á', '—Å—É–º–º–∞', 'amount', 'sum']
                            
                            if any(keyword in key.lower() for keyword in payment_keywords):
                                print(f"  üíµ {current_path}: {value}")
                            
                            if isinstance(value, (dict, list)):
                                find_payments(value, current_path)
                                
                    elif isinstance(data, list):
                        for i, item in enumerate(data):
                            current_path = f"{path}[{i}]"
                            find_payments(item, current_path)
                
                find_payments(payment_data)

if __name__ == "__main__":
    asyncio.run(test_payment_details())
